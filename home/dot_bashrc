#!/bin/bash

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# NOTE: bash profile configuration references:
# https://github.com/ChrisTitusTech/mybash

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return ;;
esac

# Disable the bell
if [[ $iatest -gt 0 ]]; then bind "set bell-style visible"; fi

# Expand the history size
export HISTFILESIZE=10000
export HISTSIZE=500
export HISTTIMEFORMAT="%F %T" # add timestamp to history

# Don't put duplicate lines in the history and do not add lines that start with a space
export HISTCONTROL=erasedups:ignoredups:ignorespace

# Check the window size after each command and, if necessary, update the values of LINES and COLUMNS
shopt -s checkwinsize

# Causes bash to append to history instead of overwriting it so if you start a new terminal, you have old session history
shopt -s histappend
PROMPT_COMMAND='history -a'

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Color for manpages in less makes manpages a little easier to read
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# set variable identifying the chroot you work in (used in the prompt below)
if [ "${debian_chroot:-}" = "" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color | *-256color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ "$force_color_prompt" != "" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
	xterm* | rxvt*)
		PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
		;;
	*) ;;
esac

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

# Keybindings
# Ctrl-l clears the screen in vi mode
# INFO: https://unix.stackexchange.com/a/104101
set -o vi

# INFO: https://stackoverflow.com/a/33338607
bind 'set show-mode-in-prompt on'

# Ignore case on auto-completion
# Note: bind used instead of sticking these in .inputrc
bind "set completion-ignore-case on"

# Show auto-completion list automatically, without double tab
bind "set show-all-if-ambiguous On"

bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'
bind -m vi-insert '"jk": vi-movement-mode'
bind -m vi-command '"gl": end-of-line'
bind -m vi-command '"gh": beginning-of-line'
# Keybindings end

# Homebrew
export HOMEBREW_FORCE_BREWED_CURL=1
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
# To deal with `failed to fetch attestations` error
# INFO: https://github.com/orgs/Homebrew/discussions/5495
unset HOMEBREW_DEVELOPER

# NOTE: Need to set up Homebrew environment first for commands installed by Homebrew added to $PATH
#
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f "$HOME"/.bash_aliases ]; then
	. "$HOME"/.bash_aliases
fi

if command -v nvim &>/dev/null; then
	export EDITOR=nvim
fi

# NOTE: Configure bash-completion before configuring another tools to avoid overwriting their completions
# Homebrew Bash Shell completion
# https://docs.brew.sh/Shell-Completion
if command -v brew &>/dev/null; then
	HOMEBREW_PREFIX="$(brew --prefix)"
	if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
		source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
	else
		for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
			[[ -r "$COMPLETION" ]] && source "$COMPLETION"
		done
	fi
fi
# Homebrew end

# Tools

if command -v pyenv 1>/dev/null 2>&1; then
	export PYENV_ROOT="$(pyenv root)"
	eval "$(pyenv init -)"
fi

# enable color support for grep
export CLICOLOR=1
export LS_COLORS='no=00:fi=00:di=00;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:*.xml=00;31:'
#export GREP_OPTIONS='--color=auto' #deprecated

if command -v rg &> /dev/null; then
	# Alias grep to rg if ripgrep is installed
	alias grep='rg'
else
	# Alias grep to /usr/bin/grep with GREP_OPTIONS if ripgrep is not installed
	alias grep="/usr/bin/grep $GREP_OPTIONS"
fi
unset GREP_OPTIONS

# FZF
# NOTE: customize fzf layout
# INFO: https://vitormv.github.io/fzf-themes/

# INFO: https://github.com/junegunn/fzf?tab=readme-ov-file#tips
if command -v fzf &>/dev/null && command -v fd &>/dev/null; then
	# Use the CLI fd to respect ignore files (like '.gitignore'),
	# display hidden files, and exclude the '.git' directory.
	export FZF_DEFAULT_COMMAND="fd . --hidden --exclude .git"
	export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
# INFO: https://github.com/junegunn/fzf?tab=readme-ov-file#setting-up-shell-integration
# Set up fzf key bindings and fuzzy completion
eval "$(fzf --bash)"
# FZF end

if ! [ "$TERM_PROGRAM" = "vscode" ]; then
	eval "$(starship init bash)"
fi
eval "$(zoxide init bash)"
# fnm
FNM_PATH="$HOME/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
	export PATH="$FNM_PATH:$PATH"
	eval "$(fnm env)"
	eval "$(fnm completions --shell bash)"
fi

# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

eval "$(atuin init bash)"

if command -v delta &>/dev/null; then
	export DELTA_FEATURES=+side-by-side
fi

if [ -f "$HOME"/bash-wakatime/bash-wakatime.sh ]; then
	source "$HOME"/bash-wakatime/bash-wakatime.sh
fi

# NOTE: atuin require bash-preexec
[ -f /home/linuxbrew/.linuxbrew/etc/profile.d/bash-preexec.sh ] && . /home/linuxbrew/.linuxbrew/etc/profile.d/bash-preexec.sh

if command -v yazi &>/dev/null; then
	# INFO: https://yazi-rs.github.io/docs/quick-start#shell-wrapper
	y() {
		local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
		yazi "$@" --cwd-file="$tmp"
		if cwd="$(command cat -- "$tmp")" && [ "$cwd" != "" ] && [ "$cwd" != "$PWD" ]; then
			builtin cd -- "$cwd"
		fi
		rm -f -- "$tmp"
	}
fi

[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env" 

# Python
# NOTE: python install user tools in $HOME/.local/bin
if [ -d "$HOME/.local/bin" ]; then
	export PATH="$HOME/.local/bin:$PATH"
fi

if command -v uv &>/dev/null; then
	eval "$(uv generate-shell-completion bash)"
fi
if command -v uvx &>/dev/null; then
	eval "$(uvx --generate-shell-completion bash)"
fi
# Python

if command -v rbenv &>/dev/null; then
	eval "$(rbenv init - --no-rehash bash)"
fi

if command -v vagrant &>/dev/null; then
	# https://github.com/microsoft/WSL/issues/423#issuecomment-1620472312
	if systemd-detect-virt | grep -q wsl; then
		# https://developer.hashicorp.com/vagrant/docs/other/wsl#windows-access-1
		export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"
		export PATH="$PATH:/mnt/c/Program Files/Oracle/VirtualBox"
		# https://www.reddit.com/r/bashonubuntuonwindows/comments/8dhhrr/comment/dxn9obq/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
		# username="$(cmd.exe /c "echo %USERNAME%" 2>/dev/null)"
		# export VAGRANT_WSL_WINDOWS_ACCESS_USER_HOME_PATH="/mnt/c/Users/$username"
	fi
fi
# Tools end

export PATH="$HOME/.config/herd-lite/bin:$PATH"
export PHP_INI_SCAN_DIR="$HOME/.config/herd-lite/bin:$PHP_INI_SCAN_DIR"

[ -f "$HOME/.local/bin/env" ] && . "$HOME/.local/bin/env" 

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
# bun end
