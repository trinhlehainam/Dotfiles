# ============================================================================
# TMUX Configuration with Vim-Tmux Navigator Integration
# ============================================================================
#
# This configuration provides seamless navigation between tmux panes and Neovim
# windows, with intelligent vim process detection and unified keybindings.
#
# Resources:
# - Awesome-tmux: https://github.com/rothgar/awesome-tmux 
# - Vim-tmux-navigator: https://github.com/christoomey/vim-tmux-navigator
#
# ============================================================================

# ----------------------------------------------------------------------------
# Terminal & Display Configuration
# ----------------------------------------------------------------------------

# Essential settings for proper Neovim integration with tmux
# - Reduce escape time to 10ms for faster key response in vim
# - Enable focus events so vim can detect when tmux pane gains/loses focus
set-option -sg escape-time 10
set-option -g focus-events on

# Terminal configuration for proper color support
# - Use screen-256color as base terminal type
# - Enable RGB/true color support for modern color schemes
TERM=screen-256color
set-option -g default-terminal "$TERM"
set-option -a terminal-features "$TERM:RGB"

# ----------------------------------------------------------------------------
# Core Configuration Variables
# ----------------------------------------------------------------------------

# Pane resize increment - adjust this value to change resize step size
# Used by Alt+u/d/,/. keybindings for consistent resize behavior
RESIZE_STEP=5

# ----------------------------------------------------------------------------
# Prefix Key & Basic Settings
# ----------------------------------------------------------------------------

# Change prefix from default Ctrl-b to Ctrl-a (more ergonomic)
# Unbind the old prefix to avoid conflicts
unbind C-b
set -g prefix C-a

# Configuration reload keybinding
# Press prefix + r to reload tmux configuration
unbind r
bind r source-file ~/.tmux.conf \; display-message "Reloaded .tmux.conf"

# Enable mouse support for pane selection, resizing, and scrolling
# Useful for quick navigation but vim-tmux-navigator provides keyboard alternative
set -g mouse on

# ============================================================================
# KEYBINDINGS SECTION
# ============================================================================

# ----------------------------------------------------------------------------
# Vi-mode Configuration
# ----------------------------------------------------------------------------

# Enable vi-style key bindings in copy mode
# This makes tmux copy mode behave like vim's visual mode
set-window-option -g mode-keys vi

# Vi-style copy mode keybindings
# v: Begin visual selection (like vim's 'v')
# y: Yank/copy selection and exit copy mode (like vim's 'y')
# Ctrl-v: Toggle rectangular/block selection (like vim's Ctrl-v)
# Escape: Cancel copy mode selection
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi Escape send -X cancel

# ----------------------------------------------------------------------------
# Vim-Tmux Navigator Integration
# ----------------------------------------------------------------------------
# 
# This section implements seamless navigation between tmux panes and Neovim splits
# using the same keybindings (Ctrl-h/j/k/l). The system intelligently detects
# if the current pane is running vim and either sends the key to vim or navigates
# tmux panes accordingly.
#
# See: https://github.com/christoomey/vim-tmux-navigator

# Vim process detection pattern
# Matches various vim executables: vim, nvim, view, vimdiff, etc.
# Also includes fzf since it's commonly used within vim
vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'

# Command to check if current pane is running vim
# Uses ps to check process state and command name against vim pattern
# Excludes stopped/suspended processes (TXZ states)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"

# Smart pane navigation keybindings
# If vim is running: send the key to vim for window navigation
# If vim is not running: navigate tmux panes
# Ctrl-h: Left pane/window
# Ctrl-j: Down pane/window  
# Ctrl-k: Up pane/window
# Ctrl-l: Right pane/window
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# Alternative implementation for Ctrl-\ (last pane toggle)
# Commented out due to escaping complexity, but kept for reference
# Different tmux versions handle escaping differently
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# Navigation keybindings for copy-mode-vi
# When in tmux copy mode, use direct pane navigation (no vim detection needed)
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l

# ----------------------------------------------------------------------------
# Smart Pane Resizing
# ----------------------------------------------------------------------------
#
# Intelligent pane resizing that works with vim splits
# Uses the same detection logic as navigation to determine behavior
# Alt (Meta) key combinations for resizing without prefix

# Smart pane resize keybindings (no prefix required)
# If vim is running: send resize keys to vim for split resizing
# If vim is not running: resize tmux panes
# Alt-,: Decrease width/move left border right
# Alt-.: Increase width/move right border right  
# Alt-u: Decrease height/move top border up
# Alt-d: Increase height/move bottom border down
bind-key -n M-, if-shell "$is_vim" 'send-keys M-,' 'resize-pane -L $RESIZE_STEP'
bind-key -n M-. if-shell "$is_vim" 'send-keys M-.' 'resize-pane -R $RESIZE_STEP'
bind-key -n M-u if-shell "$is_vim" 'send-keys M-u' 'resize-pane -U $RESIZE_STEP'
bind-key -n M-d if-shell "$is_vim" 'send-keys M-d' 'resize-pane -D $RESIZE_STEP'

# Resize keybindings for copy-mode-vi
# In copy mode, resize tmux panes directly (no vim detection needed)
bind-key -T copy-mode-vi 'M-,' resize-pane -L $RESIZE_STEP
bind-key -T copy-mode-vi 'M-.' resize-pane -R $RESIZE_STEP
bind-key -T copy-mode-vi 'M-u' resize-pane -U $RESIZE_STEP
bind-key -T copy-mode-vi 'M-d' resize-pane -D $RESIZE_STEP

# ----------------------------------------------------------------------------
# Window Splitting
# ----------------------------------------------------------------------------

# Replace default split keybindings with more intuitive ones
# Unbind default % (horizontal split) and " (vertical split)
unbind %
unbind '"'

# Intuitive split keybindings:
# prefix + | : Split horizontally (creates left/right panes)
# prefix + - : Split vertically (creates top/bottom panes)
# Both splits inherit the current path from the active pane
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# ============================================================================
# END KEYBINDINGS SECTION
# ============================================================================

# ----------------------------------------------------------------------------
# Window & Pane Indexing
# ----------------------------------------------------------------------------

# Start window numbering at 1 instead of 0 (more intuitive)
# Start pane numbering at 1 instead of 0 (consistent with windows)
set -g base-index 1
set -g pane-base-index 1

# ----------------------------------------------------------------------------
# Status Bar Configuration
# ----------------------------------------------------------------------------

# Position status bar at the top of the terminal
# Provides more space for terminal content at bottom
set-option -g status-position top

# NOTE: first clone tpm git project with `git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm`
set -g @plugin 'tmux-plugins/tpm'

# List of plugins
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'omerxx/tmux-sessionx'
set -g @plugin 'catppuccin/tmux'

# I recommend using `o` if not already in use, for least key strokes when launching
set -g @sessionx-bind 'o'

# #region catppuccin
# Ref: https://github.com/catppuccin/tmux?tab=readme-ov-file#config-3

# Configure the catppuccin plugin
set -g @catppuccin_flavor "mocha"
set -g @catppuccin_window_status_style "rounded"

## Window global/default configuration
set -g @catppuccin_window_default_text " #{window_name}"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_number_position "left"

## Window current configuration
set -g @catppuccin_window_current_text " #{window_name}"
set -g @catppuccin_window_current_fill "all"
## Window other configuration
set -g @catppuccin_window_text " #{window_name}"

set -g status-right-length 100
set -g status-left ""
set -gF status-right "#{E:@catppuccin_status_session}"
set -agF status-right "#{E:@catppuccin_status_user}"
set -agF status-right "#{E:@catppuccin_status_host}"
# #endregion catppuccin

# NOTE: Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
